// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CyrilSbrodov/GopherAPIStore/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"


	gomock "github.com/golang/mock/gomock"

	"github.com/CyrilSbrodov/passManager.git/server/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CollectCard mocks base method.
func (m *MockStorage) CollectCard(arg0 *models.CryptoCard, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectCard", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectCard indicates an expected call of CollectCard.
func (mr *MockStorageMockRecorder) CollectCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectCard", reflect.TypeOf((*MockStorage)(nil).CollectCard), arg0, arg1)
}

// CollectPassword mocks base method.
func (m *MockStorage) CollectPassword(arg0 *models.CryptoPassword, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectPassword", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectPassword indicates an expected call of CollectPassword.
func (mr *MockStorageMockRecorder) CollectPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectPassword", reflect.TypeOf((*MockStorage)(nil).CollectPassword), arg0, arg1)
}

// CollectText mocks base method.
func (m *MockStorage) CollectText(arg0 *models.CryptoTextData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectText", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectText indicates an expected call of CollectText.
func (mr *MockStorageMockRecorder) CollectText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectText", reflect.TypeOf((*MockStorage)(nil).CollectText), arg0, arg1)
}

// CollectBinary mocks base method.
func (m *MockStorage) CollectBinary(arg0 *models.CryptoBinaryData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectBinary", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectBinary indicates an expected call of CollectBinary.
func (mr *MockStorageMockRecorder) CollectBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectBinary", reflect.TypeOf((*MockStorage)(nil).CollectBinary), arg0, arg1)
}

// GetCards mocks base method.
func (m *MockStorage) GetCards(arg0 string) (int, []models.CryptoCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]models.CryptoCard)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCards indicates an expected call of GetCards.
func (mr *MockStorageMockRecorder) GetCards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockStorage)(nil).GetCards))
}

// GetPassword mocks base method.
func (m *MockStorage) GetPassword(arg0 string) (int, []models.CryptoPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]models.CryptoPassword)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockStorageMockRecorder) GetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockStorage)(nil).GetPassword))
}

// GetText mocks base method.
func (m *MockStorage) GetText(arg0 string) (int, []models.CryptoTextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetText")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]models.CryptoTextData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetText indicates an expected call of GetText.
func (mr *MockStorageMockRecorder) GetText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetText", reflect.TypeOf((*MockStorage)(nil).GetText))
}

// GetBinary mocks base method.
func (m *MockStorage) GetBinary(arg0 string) (int, []models.CryptoBinaryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinary")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]models.CryptoBinaryData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBinary indicates an expected call of GetBinary.
func (mr *MockStorageMockRecorder) GetBinary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinary", reflect.TypeOf((*MockStorage)(nil).GetBinary))
}

// Login mocks base method.
func (m *MockStorage) Login(arg0 *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockStorage) Register(arg0 *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), arg0)
}

// UpdateCard mocks base method.
func (m *MockStorage) UpdateCard(arg0 *models.CryptoCard, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockStorageMockRecorder) UpdateCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockStorage)(nil).UpdateCard), arg0)
}

// UpdatePassword mocks base method.
func (m *MockStorage) UpdatePassword(arg0 *models.CryptoPassword, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStorageMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStorage)(nil).UpdatePassword), arg0)
}

// UpdateText mocks base method.
func (m *MockStorage) UpdateText(arg0 *models.CryptoTextData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockStorageMockRecorder) UpdateText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockStorage)(nil).UpdateText), arg0)
}

// UpdateBinary mocks base method.
func (m *MockStorage) UpdateBinary(arg0 *models.CryptoBinaryData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinary", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBinary indicates an expected call of UpdateBinary.
func (mr *MockStorageMockRecorder) UpdateBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinary", reflect.TypeOf((*MockStorage)(nil).UpdateBinary), arg0)
}

// DeleteCard mocks base method.
func (m *MockStorage) DeleteCard(arg0 *models.CryptoCard, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockStorageMockRecorder) DeleteCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockStorage)(nil).DeleteCard), arg0)
}

// DeletePassword mocks base method.
func (m *MockStorage) DeletePassword(arg0 *models.CryptoPassword, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassword", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePassword indicates an expected call of DeletePassword.
func (mr *MockStorageMockRecorder) DeletePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassword", reflect.TypeOf((*MockStorage)(nil).DeletePassword), arg0)
}

// DeleteText mocks base method.
func (m *MockStorage) DeleteText(arg0 *models.CryptoTextData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockStorageMockRecorder) DeleteText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockStorage)(nil).DeleteText), arg0)
}

// DeleteBinary mocks base method.
func (m *MockStorage) DeleteBinary(arg0 *models.CryptoBinaryData, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinary", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinary indicates an expected call of DeleteBinary.
func (mr *MockStorageMockRecorder) DeleteBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinary", reflect.TypeOf((*MockStorage)(nil).DeleteBinary), arg0)
}